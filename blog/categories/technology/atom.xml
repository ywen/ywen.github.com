<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: technology | ywen.in.coding]]></title>
  <link href="http://ywen.github.com/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://ywen.github.com/"/>
  <updated>2012-04-18T22:23:50-05:00</updated>
  <id>http://ywen.github.com/</id>
  <author>
    <name><![CDATA[Yi Wen]]></name>
    <email><![CDATA[ywen.github@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[100% test coverage is the starting point]]></title>
    <link href="http://ywen.github.com/blog/2012/04/18/100-percent-test-coverage-is-the-starting-point/"/>
    <updated>2012-04-18T21:18:00-05:00</updated>
    <id>http://ywen.github.com/blog/2012/04/18/100-percent-test-coverage-is-the-starting-point</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>I am surprised when I read this <a href="http://martinfowler.com/bliki/TestCoverage.html">post</a> because I am one of Martin Fowler fans and still is. But I have to disagree large part of Martin's view on this issue.</p>

<p>First, the part that I agree with him is that test coverage should not be a goal, and a high number doesn't mean much. But from this fact, I have my own conclusions.</p>

<h2>What is ideal test coverage number</h2>

<p>In short, 100% test coverage number is not a goal, it is a requirement, a starting point for doing good tests. Below 100% is unacceptable.</p>

<p>Why? I will use some ruby code as my example</p>

<p>```ruby</p>

<p>return true if condition?
```</p>

<p>with one test in rspec:</p>

<p>```ruby</p>

<p>context "when the condition is true" do
  it "returns true" do</p>

<pre><code>subject.stub(:condition?).and_return true
subject.method.should be_true
</code></pre>

<p>  end
end
```</p>

<p>When you run the test with coverage, the line has a 100% coverage number. But do you really test the method well? the answer is no because you also need to test when condition is <code>false</code>. So the "real" coverage here is actually like 50% roughly.</p>

<p>Now think about it, when the test coverage tool tells you that you are 100% covered, it is probably lying, you don't. What about Martin's claims of "high coverage" like 90%? how poor that coverage is if 100% cverage is not that convicing?</p>

<h2>Test every method?</h2>

<p>Do I absoutely test every each single method? The answer is no. Here is an example:</p>

<p>I love constructor injection pattern, so a lot of my code looks like this:</p>

<p>```ruby</p>

<p>Class A
  attr_reader :dep1, :dep2
  private :dep1, :dep2
  def initialize(dep1, dep2)</p>

<pre><code>@dep1, @dep2 = dep1, dep2
</code></pre>

<p>  end
end
```</p>

<p>How would I test this code in seperation? Basically I can't, and I don't. So if I write this code and commit, my test coverage will go below 100%. Is that OK? No, absolutely not OK. Then what do I do wrong?</p>

<p>I have to step back and ask myself, why do I write this code? Do I really need it? The answer most likely is: yes I do. However, it is not useful on its own, I will need my dependencies in some of instance methds in that class. But I don't need the dependencies until I actually work on the instance methods.</p>

<p>So what I do wrong is the sequence of my actions. I should have had written one test that will present an intent, or a uasge of an instance of this class, and I start to impelment the method that does it. When I implement the method, I may find out that I have to add such a constructor (or not, for what it worth). At that time, I add this constructor and it is covered by an execution of the test against the instance method. My coverage number is still 100%.</p>

<p>This example essentially is the principle of "Do not test private methods".</p>

<h2>validates_present_of</h2>

<p>I would like to be off topic a little bit to discuss a view that some people hold: do not test your validations in Rails since you are tesing the framework.</p>

<p>Well, the truth is, you are not testing framework. When you add one line into your class like</p>

<p><code>ruby
validates_present_of :name
</code></p>

<p>You add a business rule in it. The framework does not have this rule, it doesn't know the <code>:name</code> is required in this model class. So you should be testing this line to make sure name is being required.</p>

<p>Think of an exetreme situation: Given that you don't test this line, some developer accidently deletes the line. No tests would fail and the fault code goes to production. Then next thing you know, you eitehr raises a bunch of 500 error when user doesn't fill in the name, or worse, some users register successfully without a name. You then may not be able to charge his card because no name associates with it. Would you still think this line is framework concern at that point?</p>

<p>If you write you test like this:</p>

<p><code>ruby
it "is required" do
  subject.name = nil
  subject.valid?
  subject.errors[:name].should include("is required")
end
</code></p>

<p>Then you are testing the framework because the error message is generated by the framework, not by your code. So something like:</p>

<p><code>ruby
subject.should have(1).error_on(:name)
</code></p>

<p>is good.</p>

<p>Some would argue it is so painful to write like 5 lines of code for each attribute being validated. Very true, but how about this in your test:</p>

<p><code>ruby
it_requires_attributes :name, :email
</code></p>

<p>This looks easy, right? All you have to do is to add a macro behind the scene to exapand into some good tests. I am not advocating this macro itself, I am just saying there are a lot of ways to make your tests DRY.</p>

<h2>In team environments</h2>

<p>It is very difficult to configure a CI environment with less than 100% test coverage. The problem is this: Say your manager demands a 86% test coverage. Then one could just wait for another teammate commits and increase the test coverage to 86.1%, then he commits without test, drop the test coverage back to 86%. Mission accomplished.</p>

<p>So the only way that makes sense is to ensure to increase or maintain the test coverage with every commits (or every merge back to the main line if you use git). To do so, a lot of job must be done on the CI servers side to be able to:</p>

<ul>
<li>Know the current thershold</li>
<li>Increase the thershold automatically when the test coverage goes up</li>
<li>Break the build when the test coverage is below the thershold</li>
</ul>


<p>With a 100% code coverage, this is so much simpler, each commit either has 100% coverage, or it doesn't. The CI servers just need to fail those who don't.</p>

<h2>Summary</h2>

<p>I understand Martin's position completely. He is addressing the problem where the test coverage number becomes only a goal, a symbol, not the real effort. But it doesn't mean a CI server should not measure the test coverage. In my own practice, when we have this number and when people do realize how bad it is, we ted to do a better job, pay more attention to the code we write. It is a very useful tool for a team in learning.</p>

<p>When a team becomes better, the build will not break because of the test coverage, then it doesn't really matter if the CI server keeps measureing it. It will give people confidence, validate what they have been doing. Thus a good ending.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My coding standard for Rails projects (part 3)]]></title>
    <link href="http://ywen.github.com/blog/2012/04/05/coding-standard-part-3/"/>
    <updated>2012-04-05T22:41:00-05:00</updated>
    <id>http://ywen.github.com/blog/2012/04/05/coding-standard-part-3</id>
    <content type="html"><![CDATA[<h2>Unit Testing</h2>

<p>Unit Testing is the central piece of a project for two reasons:</p>

<ul>
<li>Tests direct how the production code is written.</li>
<li>Tests assure any given execution paths within a unit (method) output when a developer thinks they output</li>
</ul>


<p>I am going to trying to describe how the tests direct how the code under test is written.</p>

<p>I have class which takes a hash called <code>settings</code> and use the <code>settings</code> to do something.</p>

<p>Like below:</p>

<p>```ruby</p>

<p>class SomeClass
  attr_reader :settings
  private :settings
  def initialize(settings)</p>

<pre><code>@settings = settings
</code></pre>

<p>  end</p>

<p>  def deliver!(mail)</p>

<pre><code>list = Redis::List.new settings[:redis_key_name], :marshal =&gt; true
settings[:marshallable_converters].each do |setting|
  mail = MarshallableConverterSetting.new(setting).marshallable_class.marshallable(mail)
end
list &lt;&lt; mail
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>Now the problem is that sometimes <code>settings</code> will miss some keys. It may not have <code>:redis_key_name</code>, for example. In this case, I can assume that a default for the missing keys.</p>

<p>The first attempt is to do something like this in the <code>initialize</code>:</p>

<p>```ruby</p>

<p>def initialize(settings)
  @settings = default_settings.merge(settings)
end</p>

<p>private
def default_settings
  {:redis_key_name => "some-name", :marshallable_converters => :some_default}
end</p>

<p>```</p>

<p>First, let me say although this is relatively small, it breaks something important about OO design: the logic for inserting the defaults doesn't belong to this class logically, it should not be this class's responsibility to consider this.</p>

<p>In the real world, I may not realize this at all, it is such a small and innocent adds. But what happned was, I wrote my tests first and tried to go with this path, then I found out how am I going to test this? I could not check the <code>settings</code> hash since it is private (and it should be). I could call <code>deliver!</code>, adding contexts to check when a setting is misisng, the default takes over, but that will make the tests so messy and irrelevant. Then I figured I couldn't do this. I should seek other implementations. So the end result is like this:</p>

<p>```ruby</p>

<p>class SomeClass
  attr_reader :settings
  private :settings</p>

<p>  # @api private
  def initialize(settings)</p>

<pre><code>@settings = Settings.new(settings)
</code></pre>

<p>  end</p>

<p>  # @api private
  def deliver!(mail)</p>

<pre><code>list = Redis::List.new settings.redis_key_name, :marshal =&gt; true
settings.marshallable_converters.each do |setting|
  mail = MarshallableConverterSetting.new(setting).marshallable_class.marshallable(mail)
end
list &lt;&lt; mail
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>A new class <code>Settings</code> is being added for handling default values. Both the code and tests become much simpler. As a bonus, <code>Settings</code> class is later being reused by other classes as well.</p>

<h2>Integration Tests</h2>

<p>A few words about the tools.</p>

<p>I don't like cucumber since day one. It is messy with global steps; it claims writing cucumber tests is doing BDD, well, it is not. It is doing integration testing, pure and simple.</p>

<p>Reardless, cucumber is widely used and something better than cuucmber coming out from cucumber, such as sinnach and turnip.</p>

<p>The great thing about cucumber is Gherkin, a great way communicating between Business Analyst (BA) / Product Manager (PM) / QA and developers.</p>

<p>Integration tests are essential to a project: unit testing should cover all the logic within a method, but there is no guarantee that calls between methods will work correctly. We cannot prove the correctness of a program in a reasonable time, but we can increase the chance of its being correctly written by using the integration tests.</p>

<p>When a developer starting on a new feature, he writes a feature with several scenarios (could be written by a BA), which of course won't pass. And actively communicate with business people on if this is what they want. Getting some resonable insights on what the feature is about, his task then become clearly defined: implement something to make the feature goes green.</p>

<p>Same for bug fixes, first write a feature that will fail because of the bug in question. Then fix the bug and verify the feature passes. This approach will give developer a clear defined goal. And in the end, the developer can say with confidence: I fixed the bug because now this feature is green. This is also a great way to let the managements have faith in the development team as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My coding standard for Rails projects (part 2)]]></title>
    <link href="http://ywen.github.com/blog/2012/04/02/coding-standard-part-2/"/>
    <updated>2012-04-02T00:00:00-05:00</updated>
    <id>http://ywen.github.com/blog/2012/04/02/coding-standard-part-2</id>
    <content type="html"><![CDATA[<h2>Builders</h2>

<p>In the part 1, the code snippet about the controller has a line</p>

<p>```ruby</p>

<p>user = Builders::User.new(params).build</p>

<p>```</p>

<p>This implies that a <a href="http://en.wikipedia.org/wiki/Builder_pattern">Builder Pattern</a> is used for creating a model, more precisely, creating an <a href="http://domaindrivendesign.org/node/88">"Aggregate"</a> in the Domain Driven Design terminology. The return value of a builder should always be the root object of the aggregate. Below is an example of a <code>build</code> method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>User Builder  (builder.rb)</span> <a href='/downloads/code/builder.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Builders</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Builder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build</span>
</span><span class='line'>      <span class="no">BusinessModel</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">business_object</span><span class="o">|</span>
</span><span class='line'>        <span class="n">business_object</span><span class="o">.</span><span class="n">email_addresses</span> <span class="o">=</span> <span class="o">[</span><span class="no">EmailAddress</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">build</span><span class="o">]</span>
</span><span class='line'>        <span class="n">business_object</span><span class="o">.</span><span class="n">phones</span> <span class="o">=</span> <span class="o">[</span><span class="no">Phone</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">build</span><span class="o">]</span>
</span><span class='line'>        <span class="n">business_object</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="no">Address</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A DRY version of a typical builder in the form of an internal DSL could be:</p>

<p>```ruby</p>

<p>module Builders
  class User</p>

<pre><code>build_for :user, 
  :has_many_associations =&gt; [:email_addresses, :phones],
  :has_one_associations =&gt; [:address]
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>A lof of Rails projects I have seen have building <code>email_addresses</code> and <code>phones</code> logic in the <code>UsersController</code>, which then becomes hard to unit test and impossible to reuse.</p>

<p>Another replacement to the builders is using hooks, such as <code>after_create</code>. This makes your code highly depends on a specific ORM implementation, making the one line <code>user.create!</code> becomes hard to understand, and slow the unit tests.</p>

<p>The User BusinessModel should be responsible building a <code>user</code> and only it. Below is a possible implementation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>BusinessModel Builder  (business_model_builder.rb)</span> <a href='/downloads/code/business_model_builder.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">BusinessModel</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">valid_params</span><span class="p">(</span><span class="n">params</span><span class="p">))</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">object</span><span class="o">|</span>
</span><span class='line'>          <span class="k">raise</span> <span class="no">ObjectInvalidError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">object</span><span class="o">.</span><span class="n">errors</span><span class="p">)</span> <span class="k">unless</span> <span class="n">object</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="kp">private</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">valid_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="o">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="o">].</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class='line'>          <span class="n">attributes</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="n">key</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This, as usual, can be abstracted into a DSL:</p>

<p>```ruby</p>

<p>module BusinessModel
  class User</p>

<pre><code>class &lt;&lt; self
  private
  def valid_params
    ...
  end
end

have_builder_method
</code></pre>

<p>  end
end</p>

<p>```</p>

<h2>Business Models</h2>

<p>A business model, in Domain Driven Design term, is a <a href="http://domaindrivendesign.org/node/109">Entity</a>. A business model should be persisted, but the model itself knows nothing about how itself being persisted, it delegates such a task to its persistence class.</p>

<p>A business model, contains attributes and business-related calculations based on these atrributes.</p>

<p>A business model also contains the validations that can be called by <code>user.valid?</code></p>

<h2>Persistence Classes</h2>

<p>In the controller code in the part 1:</p>

<p>```ruby</p>

<p>Persistence::User.new(user).persist</p>

<p>```</p>

<p>A Persistence class takes the business model object as its only parameter in its constructor and the persists the object. The Persistence object knows to how to map a model object's attributes into database columns, for example. An example of such a method could be like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Uer Persistence Class  (persistence_create.rb)</span> <a href='/downloads/code/persistence_create.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Persistence</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">persist</span>
</span><span class='line'>      <span class="no">ActiveRecordStore</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">business_object</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="c1">#save part of attributes to redis</span>
</span><span class='line'>      <span class="no">RedisStore</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">business_object</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Buidling a business model from the persistence layer might look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Uer Persistence Class  (persistence_load.rb)</span> <a href='/downloads/code/persistence_load.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Persistence</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">ActiveRecordStore</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">business_object</span><span class="p">)</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>      <span class="no">RedisStore</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>ActiveRecordStore::User</code> in the code could be smart enough to load a user based on what attributes in the <code>business_object</code>. For example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ActiveRecordStore example  (active_record_store_load.rb)</span> <a href='/downloads/code/active_record_store_load.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveRecordStore</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Store</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load</span>
</span><span class='line'>      <span class="n">non_empty_attributes</span> <span class="o">=</span> <span class="no">HashHelper</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">physical_attributes</span><span class="p">)</span><span class="o">.</span><span class="n">non_blanks</span>
</span><span class='line'>      <span class="no">Physical</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">non_empty_attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The code bears some explainations: <code>physical_attributes</code> is a method to transform the business model object attributes into the table columns. This method is used by both <code>save</code> and <code>load</code>. The <code>Physical::User</code> is a child of <code>ActiveRecord::Base</code> that talks to the database directly.</p>

<p>Some custom methods might be needed, such as <code>find_by_email_address</code>. These kind of finders, though, can be easily standardized.</p>

<p>```ruby</p>

<p>generate_has_many_association_finders :user, :association_name => :email_addresses</p>

<p>```</p>

<h2>DSLs</h2>

<p>All the above examples can often be DRYed up by some internal DSLs. But I feel that I must say that these DSLs should not be overused.</p>

<p>A sympton of overuse of DSL (and thus over abstract the logic) is that the DSL allows too much options. When you find out you have to handle more than 2 slightly different situations in one DSL implementation method, it is time to seperate the situations into 2 or more slightly different DSL macros. And of course these DSL macros implementations can share a large portation of logic by abstract the common code out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My coding standard for Rails projects (part 1)]]></title>
    <link href="http://ywen.github.com/blog/2012/04/01/coding-standard-part-1/"/>
    <updated>2012-04-01T00:00:00-05:00</updated>
    <id>http://ywen.github.com/blog/2012/04/01/coding-standard-part-1</id>
    <content type="html"><![CDATA[<p>The purpose of this post is to discuss what is I think good when coding a Rails project. Some of thoughts incorporate the internal communications with my collogues <a href="https://github.com/azimux">Miles Georgi</a> and <a href="https://github.com/jeshuaborges">Jeshua Borges</a>. To publicize my thoughts as a public blog port, I hope I could get more feedbacks and improve upon the comments</p>

<h2>Layers</h2>

<p>The Rails framework is a layered architecture, and when an application becomes significantly more complicated, the default layers of Rails are not enough. I would like to discuss the layers I want to see to go into a Rails application. Next I will discuss these layers one by one</p>

<h2>Thin controllers</h2>

<p>Everybody talks about thin controllers, yet with all the trams I have worked with, the controllers never be thin. Why not? I think the answer is that people never really know where these extra yet necessary code should be put into if not in a controller. I will try to explain how I want to avoid any extra code put into the controller. In my view, the only tasks belong to a controller are:</p>

<ul>
<li>Authentications</li>
<li>Authorizations</li>
<li>Delegate the tasks to other layers</li>
<li>Setup objects for page rendering</li>
</ul>


<p>Putting anything more than the above tasks is considered to be too much by my standard.</p>

<p>A typical controller <code>create</code>, <code>show</code> ad <code>index</code> actions may look like this:</p>

<p>```ruby</p>

<p>class UsersController
  def create</p>

<pre><code>user = Builders::User.new(params).build
Persistence::User.new(user).persist
respond_with Presenters::User.new(user)
</code></pre>

<p>  end</p>

<p>  def show</p>

<pre><code>user = Finders::User.find(params[:id])
respond_with Presenters::User.new(user)
</code></pre>

<p>  end</p>

<p>  def index</p>

<pre><code>users = Finders::Users.all(params)
respond_with Presenters::MinimalUserList.new(users)
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>You may see, if several models use the same pattern as described above, we can DRY it up using some nice little DSL:</p>

<p><code>ruby
class UsersController
  create_action :user
  show_action :user
  index_action :user, :with_presenter =&gt; Presenters::MinimalUserList
end
</code></p>

<p>Even better, the specs can be as simple as:</p>

<p>```ruby
  desceribe UsersController do</p>

<pre><code>include_examples "standard create action", :model_name =&gt; :user
include_examples "standard show action", :model_name =&gt; :user
include_examples "standard index action", :model_name =&gt; :user, :with_presenter =&gt; Presenters::MinimalUserList
</code></pre>

<p>  end
```</p>

<p>You could always choose not to use these default actions generators, however, it will be more coding and probably less readable code as the result.</p>

<h2>Views and Presenters</h2>

<p>Let's face it: the views will always have logic for any given complicated enough sites. There will always be ifs and elses in the view templates. We cannot avoid them.</p>

<p>But by using the Presenter pattern, we can greatly make view much less complicated. Let's see an example (I use HAML):</p>

<p><code>haml
- image_name = @user.confirmed? "confirmed.png" : "unconfirmed.png"
%img{:source =&gt; image_name, :alt =&gt; "confirmed status"}
...
</code></p>

<p>The above example already has a condition statement. With a presenter, the view can be changed to:</p>

<p><code>haml
%img{:source =&gt; @user.confirmed_status_image_name, :alt =&gt; "confirmed status"}
</code></p>

<p>The <code>confirmed_status_image_name</code> method returns the image path will be used. Natually, such a method should not be in a business model class since it concerns the view and only the view. A presenter is the best place to put such logic. The same logic, when in a view, is hard to unit test, but when it is in its own method, it is super simple to write the tests.</p>

<p>A view template should have one and only one instance variable that passed from its associated controller action: a some sort of presenter instance. It should not have anything else. When a view requires some logic, this logic belongs to an instance method of that presenter class.</p>

<p>What about if the controller is rendering a JSON? A presenter can and should help with that. Again, JSON is just another representation of your resource, thus JSON should not be part of your business logic, it should be in a presenter. Some code snippet shows you how simple it could be:</p>

<p>```ruby
module Presenters
  class User &lt; ObjectForDisplay</p>

<pre><code>to_json_properties :name_with_first_last_in_front, :email_addresses, :phone, :status
forward_methods :email_addresses, :status, :phone

def name_with_first_last_in_front
  "#{object.first_name} #{object.last_name}"
end
</code></pre>

<p>  end
end
```</p>

<p>The <code>to_json_properties</code> defines a baseline of what attributes will be included in the <code>to_json</code> returns.  Each attribute is either forwarded from the business model object, or defined in the presenter class when it apprantely doesn't belong to a business model.</p>
]]></content>
  </entry>
  
</feed>
