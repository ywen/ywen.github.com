<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ywen.in.coding]]></title>
  <link href="http://ywen.github.com/atom.xml" rel="self"/>
  <link href="http://ywen.github.com/"/>
  <updated>2012-04-02T23:30:57-05:00</updated>
  <id>http://ywen.github.com/</id>
  <author>
    <name><![CDATA[Yi Wen]]></name>
    <email><![CDATA[ywen.github@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My coding standard for Rails projects (part 2)]]></title>
    <link href="http://ywen.github.com/blog/2012/04/02/coding-standard-part-2/"/>
    <updated>2012-04-02T00:00:00-05:00</updated>
    <id>http://ywen.github.com/blog/2012/04/02/coding-standard-part-2</id>
    <content type="html"><![CDATA[<h2>Builders</h2>

<p>In the part 1, the code snippet about the controller has a line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">Builders</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">build</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implies that a <a href="http://en.wikipedia.org/wiki/Builder_pattern">Builder Pattern</a> is used for creating a model, more precisely, creating an <a href="http://domaindrivendesign.org/node/88">&#8220;Aggregate&#8221;</a> in the Domain Driven Design terminology. The return value of a builder should always be the root object of the aggregate. Below is an example of a <code>build</code> method.</p>

<figure class='code'><figcaption><span>User Builder  (builder.rb)</span> <a href='http://ywen.github.com/downloads/code/builder.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Builders</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Builder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build</span>
</span><span class='line'>      <span class="no">BusinessModel</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">business_object</span><span class="o">|</span>
</span><span class='line'>        <span class="n">business_object</span><span class="o">.</span><span class="n">email_addresses</span> <span class="o">=</span> <span class="o">[</span><span class="no">EmailAddress</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">build</span><span class="o">]</span>
</span><span class='line'>        <span class="n">business_object</span><span class="o">.</span><span class="n">phones</span> <span class="o">=</span> <span class="o">[</span><span class="no">Phone</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">build</span><span class="o">]</span>
</span><span class='line'>        <span class="n">business_object</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="no">Address</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A DRY version of a typical builder in the form of an internal DSL could be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Builders</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="n">build_for</span> <span class="ss">:user</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:has_many_associations</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:email_addresses</span><span class="p">,</span> <span class="ss">:phones</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:has_one_associations</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:address</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lof of Rails projects I have seen have building <code>email_addresses</code> and <code>phones</code> logic in the <code>UsersController</code>, which then becomes hard to unit test and impossible to reuse.</p>

<p>Another replacement to the builders is using hooks, such as <code>after_create</code>. This makes your code highly depends on a specific ORM implementation, making the one line <code>user.create!</code> becomes hard to understand, and slow the unit tests.</p>

<p>The User BusinessModel should be responsible building a <code>user</code> and only it. Below is a possible implementation:</p>

<figure class='code'><figcaption><span>BusinessModel Builder  (business_model_builder.rb)</span> <a href='http://ywen.github.com/downloads/code/business_model_builder.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">BusinessModel</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">valid_params</span><span class="p">(</span><span class="n">params</span><span class="p">))</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">object</span><span class="o">|</span>
</span><span class='line'>          <span class="k">raise</span> <span class="no">ObjectInvalidError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">object</span><span class="o">.</span><span class="n">errors</span><span class="p">)</span> <span class="k">unless</span> <span class="n">object</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="kp">private</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">valid_params</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>        <span class="o">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="o">].</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">attributes</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class='line'>          <span class="n">attributes</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="n">key</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This, as usual, can be abstracted into a DSL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">BusinessModel</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="kp">private</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">valid_params</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">have_builder_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Business Models</h2>

<p>A business model, in Domain Driven Design term, is a <a href="http://domaindrivendesign.org/node/109">Entity</a>. A business model should be persisted, but the model itself knows nothing about how itself being persisted, it delegates such a task to its persistence class.</p>

<p>A business model, contains attributes and business-related calculations based on these atrributes.</p>

<p>A business model also contains the validations that can be called by <code>user.valid?</code></p>

<h2>Persistence Classes</h2>

<p>In the controller code in the part 1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Persistence</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">persist</span>
</span></code></pre></td></tr></table></div></figure>


<p>A Persistence class takes the business model object as its only parameter in its constructor and the persists the object. The Persistence object knows to how to map a model object&#8217;s attributes into database columns, for example. An example of such a method could be like this:</p>

<figure class='code'><figcaption><span>Uer Persistence Class  (persistence_create.rb)</span> <a href='http://ywen.github.com/downloads/code/persistence_create.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Persistence</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">persist</span>
</span><span class='line'>      <span class="no">ActiveRecordStore</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">business_object</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="c1">#save part of attributes to redis</span>
</span><span class='line'>      <span class="no">RedisStore</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">business_object</span><span class="p">)</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Buidling a business model from the persistence layer might look like this:</p>

<figure class='code'><figcaption><span>Uer Persistence Class  (persistence_load.rb)</span> <a href='http://ywen.github.com/downloads/code/persistence_load.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Persistence</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">ActiveRecordStore</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">business_object</span><span class="p">)</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>      <span class="no">RedisStore</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">load</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ActiveRecordStore::User</code> in the code could be smart enough to load a user based on what attributes in the <code>business_object</code>. For example:</p>

<figure class='code'><figcaption><span>ActiveRecordStore example  (active_record_store_load.rb)</span> <a href='http://ywen.github.com/downloads/code/active_record_store_load.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveRecordStore</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">Store</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load</span>
</span><span class='line'>      <span class="n">non_empty_attributes</span> <span class="o">=</span> <span class="no">HashHelper</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">physical_attributes</span><span class="p">)</span><span class="o">.</span><span class="n">non_blanks</span>
</span><span class='line'>      <span class="no">Physical</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">non_empty_attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code bears some explainations: <code>physical_attributes</code> is a method to transform the business model object attributes into the table columns. This method is used by both <code>save</code> and <code>load</code>. The <code>Physical::User</code> is a child of <code>ActiveRecord::Base</code> that talks to the database directly.</p>

<p>Some custom methods might be needed, such as <code>find_by_email_address</code>. These kind of finders, though, can be easily standardized.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">generate_has_many_association_finders</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:association_name</span> <span class="o">=&gt;</span> <span class="ss">:email_addresses</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DSLs</h2>

<p>All the above examples can often be DRYed up by some internal DSLs. But I feel that I must say that these DSLs should not be overused.</p>

<p>A sympton of overuse of DSL (and thus over abstract the logic) is that the DSL allows too much options. When you find out you have to handle more than 2 slightly different situations in one DSL implementation method, it is time to seperate the situations into 2 or more slightly different DSL macros. And of course these DSL macros implementations can share a large portation of logic by abstract the common code out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My coding standard for Rails projects (part 1)]]></title>
    <link href="http://ywen.github.com/blog/2012/04/01/coding-standard-part-1/"/>
    <updated>2012-04-01T00:00:00-05:00</updated>
    <id>http://ywen.github.com/blog/2012/04/01/coding-standard-part-1</id>
    <content type="html"><![CDATA[<p>The purpose of this post is to discuss what is I think good when coding a Rails project. Some of thoughts incorporate the internal communications with my collogues <a href="https://github.com/azimux">Miles Georgi</a> and <a href="https://github.com/jeshuaborges">Jeshua Borges</a>. To publicize my thoughts as a public blog port, I hope I could get more feedbacks and improve upon the comments</p>

<h2>Layers</h2>

<p>The Rails framework is a layered architecture, and when an application becomes significantly more complicated, the default layers of Rails are not enough. I would like to discuss the layers I want to see to go into a Rails application. Next I will discuss these layers one by one</p>

<h2>Thin controllers</h2>

<p>Everybody talks about thin controllers, yet with all the trams I have worked with, the controllers never be thin. Why not? I think the answer is that people never really know where these extra yet necessary code should be put into if not in a controller. I will try to explain how I want to avoid any extra code put into the controller. In my view, the only tasks belong to a controller are:</p>

<ul>
<li>Authentications</li>
<li>Authorizations</li>
<li>Delegate the tasks to other layers</li>
<li>Setup objects for page rendering</li>
</ul>


<p>Putting anything more than the above tasks is considered to be too much by my standard.</p>

<p>A typical controller <code>create</code>, <code>show</code> ad <code>index</code> actions may look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">Builders</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'>    <span class="no">Persistence</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span><span class="o">.</span><span class="n">persist</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Presenters</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">Finders</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Presenters</span><span class="o">::</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">users</span> <span class="o">=</span> <span class="no">Finders</span><span class="o">::</span><span class="no">Users</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Presenters</span><span class="o">::</span><span class="no">MinimalUserList</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">users</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may see, if several models use the same pattern as described above, we can DRY it up using some nice little DSL:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span>
</span><span class='line'>  <span class="n">create_action</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">show_action</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">index_action</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:with_presenter</span> <span class="o">=&gt;</span> <span class="no">Presenters</span><span class="o">::</span><span class="no">MinimalUserList</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even better, the specs can be as simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">desceribe</span> <span class="no">UsersController</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">include_examples</span> <span class="s2">&quot;standard create action&quot;</span><span class="p">,</span> <span class="ss">:model_name</span> <span class="o">=&gt;</span> <span class="ss">:user</span>
</span><span class='line'>    <span class="n">include_examples</span> <span class="s2">&quot;standard show action&quot;</span><span class="p">,</span> <span class="ss">:model_name</span> <span class="o">=&gt;</span> <span class="ss">:user</span>
</span><span class='line'>    <span class="n">include_examples</span> <span class="s2">&quot;standard index action&quot;</span><span class="p">,</span> <span class="ss">:model_name</span> <span class="o">=&gt;</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">:with_presenter</span> <span class="o">=&gt;</span> <span class="no">Presenters</span><span class="o">::</span><span class="no">MinimalUserList</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could always choose not to use these default actions generators, however, it will be more coding and probably less readable code as the result.</p>

<h2>Views and Presenters</h2>

<p>Let&#8217;s face it: the views will always have logic for any given complicated enough sites. There will always be ifs and elses in the view templates. We cannot avoid them.</p>

<p>But by using the Presenter pattern, we can greatly make view much less complicated. Let&#8217;s see an example (I use HAML):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">image_name</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">confirmed?</span> <span class="s2">&quot;confirmed.png&quot;</span> <span class="p">:</span> <span class="s2">&quot;unconfirmed.png&quot;</span>
</span><span class='line'><span class="nt">%img</span><span class="p">{</span><span class="ss">:source</span> <span class="o">=&gt;</span> <span class="n">image_name</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;confirmed status&quot;</span><span class="p">}</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The above example already has a condition statement. With a presenter, the view can be changed to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%img</span><span class="p">{</span><span class="ss">:source</span> <span class="o">=&gt;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">confirmed_status_image_name</span><span class="p">,</span> <span class="ss">:alt</span> <span class="o">=&gt;</span> <span class="s2">&quot;confirmed status&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>confirmed_status_image_name</code> method returns the image path will be used. Natually, such a method should not be in a business model class since it concerns the view and only the view. A presenter is the best place to put such logic. The same logic, when in a view, is hard to unit test, but when it is in its own method, it is super simple to write the tests.</p>

<p>A view template should have one and only one instance variable that passed from its associated controller action: a some sort of presenter instance. It should not have anything else. When a view requires some logic, this logic belongs to an instance method of that presenter class.</p>

<p>What about if the controller is rendering a JSON? A presenter can and should help with that. Again, JSON is just another representation of your resource, thus JSON should not be part of your business logic, it should be in a presenter. Some code snippet shows you how simple it could be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Presenters</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ObjectForDisplay</span>
</span><span class='line'>    <span class="n">to_json_properties</span> <span class="ss">:name_with_first_last_in_front</span><span class="p">,</span> <span class="ss">:email_addresses</span><span class="p">,</span> <span class="ss">:phone</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class='line'>    <span class="n">forward_methods</span> <span class="ss">:email_addresses</span><span class="p">,</span> <span class="ss">:status</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">name_with_first_last_in_front</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>to_json_properties</code> defines a baseline of what attributes will be included in the <code>to_json</code> returns.  Each attribute is either forwarded from the business model object, or defined in the presenter class when it apprantely doesn&#8217;t belong to a business model.</p>
]]></content>
  </entry>
  
</feed>
